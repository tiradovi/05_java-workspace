package edu.collection;

/**
 * 클래스, 추상 클래스 상속 키워드 : extends (문서 확장)[필드, 생성자, 메서드]
 * <p>
 * <p>
 * 인터페이스 상속 키워드 : implements (문서에 존재하는 기능 구현)[메서드]
 * 필드가 작성 가능하나 public static final(상수)만 가능
 * 작성안해도 묵시적으로 인식
 * <p>
 * 개발하고자 하는 모든 개발자들이 편리하게 만들 수 있도록 만든 코드 모음
 * 프레임 워크 : 프레임 워크가 개발자 코드를 제어 (밀키트)
 * 특정기능을 만들기 위해 구조와 틀이 정해져 있고 정해진 구조 내에서 개발
 * <p>
 * 라이브러리 : 개발자가 필요할 때 호출
 * 특정 기능을 만들기 위해서 정해진 틀없이 주어지는 기능들을 개발자가 원하는대로
 * 커스텀하여 개발이 가능
 * <p>
 * 컬렉션 프레임워크 : Java 개발자들이 자료구조를 만들어서 Java를 사용하는
 * 개발자를 위하여 자료구조를 만들어서 모아둔 것
 * 데이터를 저장하고 조작하는 표준화된 방법을 제공하는 핵심 라이브러리
 * <p>
 * 컬렉션은 인터페이스 - 클래스 형태
 * <p>
 * 특징
 * 1) 크기 제한 없음 (동적으로 증가 감소)
 * 2) 설치 필요 없이 java.util 폴더 내에 모두 존재함
 * 3) 추가, 수정, 삭제, 검색 등 다양한 기능이 구현되어 있음
 * 4) 객체만 저장 가능
 * 기본 자료형(int, boolean, long, char, short, byte, double, float)를
 * Integer, Boolean, Long, Char, Short, Byte, Double, Float
 * 같은 객체형태로 사용
 * <p>
 * 컬렉션의 대표적인 프레임워크로
 * List 인터페이스가 존재
 * List 기반으로 ArrayList 객체를 주로 활용
 * <p>
 * Set 인터페이스가 존재
 * <p>
 * Map 인터페이스가 존재
 * <p>
 * List : 순서대로 나열, 중복 허용, 순서를 보장, 인덱스로 접근
 * Set : 중복 불가, 순서는 종류에 따라 다름, 인덱스 접근 불가, 동일한 데이터 불가
 * Map : 키-값 쌍
 * 인덱스 번호 대신 개발자가 설정한 키로 데이터 조회, 수정, 삭제
 * 키의 명칭은 중복 불가, 값은 중복 가능
 */
public class 컬렉션 {
}
